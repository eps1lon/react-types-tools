--- types/react/jsx-dev-runtime.d.ts	2024-03-04 17:07:39
+++ types/react/ts5.0/jsx-dev-runtime.d.ts	2024-03-04 17:07:39
@@ -2,7 +2,6 @@
 export { Fragment } from "./";
 
 export namespace JSX {
-    type ElementType = React.JSX.ElementType;
     interface Element extends React.JSX.Element {}
     interface ElementClass extends React.JSX.ElementClass {}
     interface ElementAttributesProperty extends React.JSX.ElementAttributesProperty {}
--- types/react/jsx-runtime.d.ts	2024-03-04 17:07:39
+++ types/react/ts5.0/jsx-runtime.d.ts	2024-03-04 17:07:39
@@ -2,7 +2,6 @@
 export { Fragment } from "./";
 
 export namespace JSX {
-    type ElementType = React.JSX.ElementType;
     interface Element extends React.JSX.Element {}
     interface ElementClass extends React.JSX.ElementClass {}
     interface ElementAttributesProperty extends React.JSX.ElementAttributesProperty {}
--- types/react/test/experimental.tsx	2024-01-02 19:21:39
+++ types/react/ts5.0/test/experimental.tsx	2024-01-02 19:21:39
@@ -88,6 +88,7 @@
 
 function elementTypeTests() {
     const ReturnPromise = () => Promise.resolve("React");
+    // @ts-expect-error Needs https://github.com/DefinitelyTyped/DefinitelyTyped/pull/65135
     const FCPromise: React.FC = ReturnPromise;
     class RenderPromise extends React.Component {
         render() {
@@ -95,7 +96,9 @@
         }
     }
 
+    // @ts-expect-error Needs https://github.com/DefinitelyTyped/DefinitelyTyped/pull/65135
     <ReturnPromise />;
+    // @ts-expect-error Needs https://github.com/DefinitelyTyped/DefinitelyTyped/pull/65135
     React.createElement(ReturnPromise);
     <RenderPromise />;
     React.createElement(RenderPromise);
--- types/react/test/index.ts	2024-03-07 00:44:04
+++ types/react/ts5.0/test/index.ts	2024-03-07 00:44:05
@@ -179,6 +179,7 @@
 function FunctionComponent(props: SCProps) {
     return props.foo ? React.createElement("div", null, props.foo) : null;
 }
+
 FunctionComponent.displayName = "FunctionComponent";
 
 const FunctionComponent2: React.FunctionComponent<SCProps> =
@@ -189,6 +190,9 @@
 // allows null as props
 const FunctionComponent4: React.FunctionComponent = props => null;
 
+// undesired: Rejects `false` because of https://github.com/DefinitelyTyped/DefinitelyTyped/issues/18051
+// leaving here to document limitation and inspect error message
+// @ts-expect-error
 const FunctionComponent5: React.FunctionComponent = () => false;
 
 // React.createElement
@@ -422,7 +426,7 @@
 // Attributes
 // --------------------------------------------------------------------------
 
-const children: any[] = ["Hello world", [null], React.createElement("span")];
+const children: any[] = ["Hello world", [null], React.createElement("span", null)];
 const divStyle: React.CSSProperties = { // CSSProperties
     flex: "1 1 main-size",
     backgroundImage: "url('hello.png')",
--- types/react/test/tsx.tsx	2024-03-07 00:44:04
+++ types/react/ts5.0/test/tsx.tsx	2024-03-07 00:44:05
@@ -616,15 +616,12 @@
 
 function elementTypeTests() {
     const ReturnVoid = () => {};
-    // @ts-expect-error
-    const FCVoid: React.FC = ReturnVoid;
     class RenderVoid extends React.Component {
         // @ts-expect-error
         render() {}
     }
 
     const ReturnUndefined = () => undefined;
-    const FCUndefined: React.FC = ReturnUndefined;
     class RenderUndefined extends React.Component {
         render() {
             return undefined;
@@ -632,7 +629,6 @@
     }
 
     const ReturnNull = () => null;
-    const FCNull: React.FC = ReturnNull;
     class RenderNull extends React.Component {
         render() {
             return null;
@@ -640,7 +636,6 @@
     }
 
     const ReturnNumber = () => 0xeac1;
-    const FCNumber: React.FC = ReturnNumber;
     class RenderNumber extends React.Component {
         render() {
             return 0xeac1;
@@ -648,7 +643,6 @@
     }
 
     const ReturnString = () => "Hello, Dave!";
-    const FCString: React.FC = ReturnString;
     class RenderString extends React.Component {
         render() {
             return "Hello, Dave!";
@@ -656,8 +650,6 @@
     }
 
     const ReturnSymbol = () => Symbol.for("react");
-    // @ts-expect-error
-    const FCSymbol: React.FC = ReturnSymbol;
     class RenderSymbol extends React.Component {
         // @ts-expect-error
         render() {
@@ -666,7 +658,6 @@
     }
 
     const ReturnArray = () => [<div key="one" />];
-    const FCVArray: React.FC = ReturnArray;
     class RenderArray extends React.Component {
         render() {
             return [<div key="one" />];
@@ -674,7 +665,6 @@
     }
 
     const ReturnElement = () => <div />;
-    const FCElement: React.FC = ReturnElement;
     class RenderElement extends React.Component {
         render() {
             return <div />;
@@ -682,7 +672,6 @@
     }
 
     const ReturnReactNode = ({ children }: { children?: React.ReactNode }) => children;
-    const FCReactNode: React.FC = ReturnReactNode;
     class RenderReactNode extends React.Component<{ children?: React.ReactNode }> {
         render() {
             return this.props.children;
@@ -690,7 +679,7 @@
     }
 
     const ReturnPromise = () => Promise.resolve("React");
-    // Will not type-check in a real project but accepted in DT tests since experimental.d.ts is part of compilation.
+    // @ts-expect-error experimental release channel only
     const FCPromise: React.FC = ReturnPromise;
     class RenderPromise extends React.Component {
         // Will not type-check in a real project but accepted in DT tests since experimental.d.ts is part of compilation.
@@ -719,8 +708,10 @@
     // @ts-expect-error
     React.createElement(RenderVoid);
 
-    // Desired behavior.
+    // Undesired behavior. Returning `undefined` should be accepted in all forms.
+    // @ts-expect-error
     <ReturnUndefined />;
+    // @ts-expect-error
     React.createElement(ReturnUndefined);
     <RenderUndefined />;
     React.createElement(RenderUndefined);
@@ -731,14 +722,18 @@
     <RenderNull />;
     React.createElement(RenderNull);
 
-    // Desired behavior.
+    // Undesired behavior. Returning `number` should be accepted in all forms.
+    // @ts-expect-error
     <ReturnNumber />;
+    // @ts-expect-error
     React.createElement(ReturnNumber);
     <RenderNumber />;
     React.createElement(RenderNumber);
 
-    // Desired behavior.
+    // Undesired behavior. Returning `string` should be accepted in all forms.
+    // @ts-expect-error
     <ReturnString />;
+    // @ts-expect-error
     React.createElement(ReturnString);
     <RenderString />;
     React.createElement(RenderString);
@@ -753,7 +748,10 @@
     // @ts-expect-error
     React.createElement(RenderSymbol);
 
+    // Undesired behavior. Returning `Array` should be accepted in all forms.
+    // @ts-expect-error
     <ReturnArray />;
+    // @ts-expect-error
     React.createElement(ReturnArray);
     <RenderArray />;
     React.createElement(RenderArray);
@@ -764,15 +762,17 @@
     <RenderElement />;
     React.createElement(RenderElement);
 
-    // Desired behavior.
+    // Undesired behavior. Returning `ReactNode` should be accepted in all forms.
+    // @ts-expect-error
     <ReturnReactNode />;
+    // @ts-expect-error
     React.createElement(ReturnReactNode);
     <RenderReactNode />;
     React.createElement(RenderReactNode);
 
-    // Will not type-check in a real project but accepted in DT tests since experimental.d.ts is part of compilation.
+    // @ts-expect-error Only available in experimental release channel
     <ReturnPromise />;
-    // Will not type-check in a real project but accepted in DT tests since experimental.d.ts is part of compilation.
+    // @ts-expect-error Only available in experimental release channel
     React.createElement(ReturnPromise);
     // Will not type-check in a real project but accepted in DT tests since experimental.d.ts is part of compilation.
     <RenderPromise />;
--- types/react/index.d.ts	2024-03-07 00:44:04
+++ types/react/ts5.0/index.d.ts	2024-03-07 00:44:05
@@ -113,7 +113,7 @@
     type JSXElementConstructor<P> =
         | ((
             props: P,
-        ) => ReactNode)
+        ) => ReactElement<any, any> | null)
         | (new(
             props: P,
         ) => Component<any, any>);
@@ -191,7 +191,7 @@
         C extends
             | ForwardRefExoticComponent<any>
             | { new(props: any): Component<any> }
-            | ((props: any) => ReactNode)
+            | ((props: any) => ReactElement | null)
             | keyof JSX.IntrinsicElements,
     > = ComponentRef<C>;
 
@@ -361,6 +361,7 @@
     }
 
     /**
+     * For internal usage only.
      * Different release channels declare additional types of ReactNode this particular release channel accepts.
      * App or library types should never augment this interface.
      */
@@ -527,7 +528,7 @@
      * @template P The props the component accepts.
      */
     interface ExoticComponent<P = {}> {
-        (props: P): ReactNode;
+        (props: P): ReactElement | null;
         readonly $$typeof: symbol;
     }
 
@@ -999,7 +1000,7 @@
      * ```
      */
     interface FunctionComponent<P = {}> {
-        (props: P): ReactNode;
+        (props: P, context?: any): ReactElement<any, any> | null;
         /**
          * Ignored by React.
          * @deprecated Only kept in types for backwards compatibility. Will be removed in a futre major release.
@@ -1053,7 +1054,7 @@
      * @see {@link forwardRef}
      */
     interface ForwardRefRenderFunction<T, P = {}> {
-        (props: P, ref: ForwardedRef<T>): ReactNode;
+        (props: P, ref: ForwardedRef<T>): ReactElement | null;
         /**
          * Used in debugging messages. You might want to set it
          * explicitly if you want to display a different name for
@@ -3934,18 +3935,6 @@
 
     // Keep in sync with JSX namespace in ./jsx-runtime.d.ts and ./jsx-dev-runtime.d.ts
     namespace JSX {
-        // We don't just alias React.ElementType because React.ElementType
-        // historically does more than we need it to.
-        // E.g. it also contains .propTypes and so TS also verifies the declared
-        // props type does match the declared .propTypes.
-        // But if libraries declared their .propTypes but not props type,
-        // or they mismatch, you won't be able to use the class component
-        // as a JSX.ElementType.
-        // We could fix this everywhere but we're ultimately not interested in
-        // .propTypes assignability so we might as well drop it entirely here to
-        //  reduce the work of the type-checker.
-        // TODO: Check impact of making React.ElementType<P = any> = React.JSXElementConstructor<P>
-        type ElementType = string | React.JSXElementConstructor<any>;
         interface Element extends React.ReactElement<any, any> {}
         interface ElementClass extends React.Component<any> {
             render(): React.ReactNode;
